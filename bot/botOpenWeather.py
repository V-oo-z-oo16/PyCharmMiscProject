import telebot
from telebot import types
import requests
import threading
import time
import json

token = '7509346747:AAHE776B6FJbm3u28cx37nBoGDxxBK3HNq4'
api_key = '019c7e7223489dcc9ee589d1f4d188dc'
bot = telebot.TeleBot(token)


users_db = {}


def load_users():
    global users_db
    try:
        with open('users.json', 'r') as f:
            users_db = json.load(f)
    except:
        pass


def save_users():
    with open('users.json', 'w') as f:
        json.dump(users_db, f)


load_users()

def fetch_weather(city):
    url = f"http://api.openweathermap.org/data/2.5/weather?q={city}&appid={api_key}&units=metric&lang=ru"
    response = requests.get(url)
    if response.status_code == 200:
        data = response.json()
        return {
            'city': data['name'],
            'temp': data['main']['temp'],
            'desc': data['weather'][0]['description']
        }
    return None


def weather_monitor():
    while True:
        for chat_id, city in users_db.copy().items():
            current = fetch_weather(city)
            if not current: continue

            msg = f"üå§Ô∏è –¢–µ–∫—É—â–∞—è –ø–æ–≥–æ–¥–∞ –≤ {current['city']}:\n"
            msg += f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {current['temp']}¬∞C\n"
            msg += f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {current['desc'].capitalize()}"
            bot.send_message(chat_id, msg)

        time.sleep(3600)



@bot.message_handler(commands=['start'])
def start(message):
    msg = bot.send_message(message.chat.id, "üåç –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≥–æ—Ä–æ–¥ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:")
    bot.register_next_step_handler(msg, process_city)


def process_city(message):
    city = message.text
    weather = fetch_weather(city)
    if weather:
        users_db[str(message.chat.id)] = city
        save_users()
        bot.send_message(message.chat.id, f"‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –í–∞—à –≥–æ—Ä–æ–¥: {weather['city']}")
        button(message.chat.id)
    else:
        bot.send_message(message.chat.id, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ /start")

def button(chat_id):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–ú–æ–π –≥–æ—Ä–æ–¥")
    btn2 = types.KeyboardButton("–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
    btn3 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ")
    markup.add(btn1, btn2, btn3)
    bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda m: m.text == "–ü–æ–≥–æ–¥–∞ –≤ –¥—Ä—É–≥–æ–º –≥–æ—Ä–æ–¥–µ")
def ask_other_city(message):
    msg = bot.send_message(message.chat.id, "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:")
    bot.register_next_step_handler(msg, show_other_city_weather)

def show_other_city_weather(message):
    city = message.text
    weather = fetch_weather(city)
    if weather:
        bot.reply_to(message, f"üå§Ô∏è –ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {weather['city']}:\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {weather['temp']}¬∞C\n–°–æ—Å—Ç–æ—è–Ω–∏–µ: {weather['desc']}")
    else:
        bot.reply_to(message, "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –µ—â–µ —Ä–∞–∑.")
        msg = bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –µ—â–µ —Ä–∞–∑:")
        bot.register_next_step_handler(msg, show_other_city_weather)


@bot.message_handler(func=lambda m: m.text == "–ú–æ–π –≥–æ—Ä–æ–¥")
def show_weather(message):
    if str(message.chat.id) in users_db:
        city = users_db[str(message.chat.id)]
        weather = fetch_weather(city)
        bot.reply_to(message, f"üå§Ô∏è –í {weather['city']} —Å–µ–π—á–∞—Å {weather['temp']}¬∞C, {weather['desc']}")
    else:
        bot.send_message(message.chat.id, "‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start")


@bot.message_handler(func=lambda m: m.text == "–°–º–µ–Ω–∏—Ç—å –≥–æ—Ä–æ–¥")
def change_city(message):
    msg = bot.send_message(message.chat.id, "üåç –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥:")
    bot.register_next_step_handler(msg, process_city)


threading.Thread(target=weather_monitor, daemon=True).start()
bot.polling(none_stop=True)
